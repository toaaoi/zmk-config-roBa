#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mkp_input_listener { input-processors = <&zip_temp_layer 4 10000>; };

&mkp_input_listener { input-processors = <&zip_temp_layer 4 500>; };

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    // automouse-layer = <4>;

    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        kakko: kakko {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT_ARROW>;
            label = "KAKKO";
        };

        saves: saves {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(N) &kp E &kp N5 &kp O &kp N2 &kp L &kp N4 &kp D>;
            label = "SAVES";
        };

        move_corsor: move_corsor {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(M))>;
            label = "MOVE_CORSOR";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        mouseP: mouseP {
            compatible = "zmk,behavior-input-two-axis";
            label = "MOUSEP";
            #binding-cells = <1>;
            x-input-code = <1063>;
            y-input-code = <1439>;
            time-to-max-speed-ms = <0>;
        };

        mouseG: mouseG {
            compatible = "zmk,behavior-input-two-axis";
            label = "MOUSEG";
            #binding-cells = <1>;
            x-input-code = <823>;
            y-input-code = <962>;
            time-to-max-speed-ms = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q                   &kp W         &kp E         &kp R  &kp T                                               &kp Y      &kp U  &kp I      &kp O    &kp P
&kp A                   &kp S         &kp D         &kp F  &kp G      &kp ESC        &kp DEL                   &kp H      &kp J  &kp K      &kp L    &lt 4 ENTER
&mt LEFT_SHIFT Z        &kp X         &kp C         &kp V  &kp B      &kp TAB        &move_corsor              &kp N      &kp M  &kp COMMA  &kp DOT  &mt LEFT_ALT MINUS
&mt LEFT_CONTROL EQUAL  &kp LEFT_GUI  &kp LEFT_ALT  &mo 5  &lt 1 F13  &kp SPACE      &mt LEFT_SHIFT BACKSPACE  &lt 3 F14                             &mt LEFT_CONTROL SLASH
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&none       &kp CARET             &kp HASH       &kp AMPERSAND  &kp PRCNT                          &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp MINUS  &kp STAR
&kp DELETE  &kp DOLLAR            &kp STAR       &kp AT_SIGN    &kp EXCL   &trans      &kp PERIOD  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp PLUS   &kp SLASH
&none       &kp NON_US_BACKSLASH  &kp LG(LS(T))  &kp LC(F20)    &kp INS    &trans      &kp MINUS   &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &none      &none
&trans      &trans                &tog 2         &trans         &trans     &trans      &kp TAB     &kp NUMBER_0                                         &kp BACKSPACE
            >;
        };

        NUM {
            bindings = <
&none    &none           &kp UP_ARROW    &none            &none                             &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp MINUS  &kp STAR
&kp END  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp HOME  &none       &kp PERIOD  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp PLUS   &kp SLASH
&none    &none           &none           &none            &none     &none       &kp MINUS   &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &none      &none
&trans   &trans          &tog 2          &trans           &trans    &trans      &kp TAB     &kp NUMBER_0                                         &kp BACKSPACE
            >;
        };

        ARROW {
            bindings = <
&none   &kp LEFT_BRACKET      &kp DOUBLE_QUOTES  &kp RIGHT_BRACKET      &trans                              &saves    &none                   &kp UP_ARROW    &none                    &kp LC(W)
&none   &kp LEFT_PARENTHESIS  &kakko             &kp RIGHT_PARENTHESIS  &trans  &kp F7       &kp DEL        &kp HOME  &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END
&none   &kp LBRC              &kp SEMI           &kp RIGHT_BRACE        &trans  &kp F10      &kp LC(LS(T))  &trans    &kp LC(LG(LEFT_ARROW))  &kp LG(TAB)     &kp LC(LG(RIGHT_ARROW))  &kp LC(R)
&trans  &trans                &trans             &trans                 &trans  &trans       &trans         &trans                                                                     &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans            &trans  &trans        &trans     &trans                                   &trans  &trans    &trans    &trans    &trans
&trans            &trans  &kp LEFT_ALT  &mo 5      &trans  &mkp RCLK          &kp LC(W)     &trans  &mkp MB1  &mo 5     &mkp MB2  &trans
&kp LEFT_SHIFT    &trans  &kp LC(C)     &kp LC(V)  &trans  &kp LS(LC(T))      &move_corsor  &trans  &trans    &mkp MB4  &mkp MB5  &kp LEFT_ALT
&kp LEFT_CONTROL  &trans  &trans        &trans     &trans  &mkp LCLK          &trans        &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
